/*
STYLESHEET FOR BOOSTSMARTGRAPH VISUALIZATION.

For your customization, please see:
https://openjfx.io/javadoc/19/javafx.graphics/javafx/scene/doc-files/cssref.html

And know that:
- The drawing area itself is of type Pane, which is an extension of Region;
- A vertex is of type Shape;
- The edges are of type Line and CubicLine;
- The labels are of type Text, and;
- The arrows are of type Path.

This should help you understand which styles you can apply.
*/

.graph {
    -fx-background-color: white;
}

.vertex {
    -fx-stroke-width: 3;
    -fx-fill: #008cff;
    -fx-view-order:2;
}
.vertex:hover { /* pseudo-classes also work */
    /*-fx-cursor: default; */ /* You can use this style to override the hand/move cursors while hovering. */
    -fx-stroke-width: 2;
    -fx-stroke: #61B5F1;
    -fx-stroke-type: inside; /* you should keep this if using arrows */
    -fx-fill: #B1DFF7;
}
.vertex-deactivated-first {
    -fx-stroke-width: 3;
    -fx-fill: #4f5d75;
    -fx-view-order:2;
}

.vertex-deactivated {
    -fx-stroke-width: 3;
    -fx-fill: gray;
    -fx-view-order:2;
}
.vertex-hover { /* pseudo-classes also work */
    /*-fx-cursor: default; */ /* You can use this style to override the hand/move cursors while hovering. */
    -fx-stroke-width: 2;
    -fx-stroke: #ff8f4b;
    -fx-stroke-type: inside; /* you should keep this if using arrows */
    -fx-fill: #ff8f4b;
}
.vertex-hover:hover { /* pseudo-classes also work */
    /*-fx-cursor: default; */ /* You can use this style to override the hand/move cursors while hovering. */
    -fx-stroke-width: 2;
    -fx-stroke: #ff9e00;
    -fx-stroke-type: inside; /* you should keep this if using arrows */
    -fx-fill: #ffcb69;
}



.vertex-label {
    -fx-font: bold 12pt "sans-serif";
    -fx-text-alignment: center;
    -fx-alignment: center;
    -fx-translate-y:-27;
    -fx-translate-z:-1;
    -fx-fill:white;
}


.edge-dash {
    -fx-stroke-width: 1;
    -fx-stroke: gray;
    -fx-fill: transparent; /* Importante per mantenere gli archi curvi */
    -fx-stroke-line-cap: round;
    -fx-opacity: 0.8;
    -fx-stroke-dash-array: 5 5; /* Alterna un tratto di 5 unità e uno spazio di 5 unità */
}

.edge-dash-hover {
    -fx-stroke-width: 2;
    -fx-stroke: gray;
    -fx-fill: transparent; /* Importante per mantenere gli archi curvi */
    -fx-stroke-line-cap: round;
    -fx-opacity: 0.8;
    -fx-stroke-dash-array: 5 5; /* Alterna un tratto di 5 unità e uno spazio di 5 unità */
}

.edge {
    -fx-stroke-width: 1;
    -fx-stroke: gray;
    -fx-fill: transparent; /* important to keep for curved edges */
    -fx-stroke-line-cap: round;
    -fx-opacity: 0.8;
        -fx-stroke-dash-array: 0.1;

}


.edge-hover {
    -fx-stroke-width: 2;
    -fx-stroke: gray;
    -fx-fill: transparent; /* importante per mantenere gli angoli curvi */
    -fx-stroke-line-cap: round;
    -fx-opacity: 0.8;
    -fx-stroke-dash-array: 0.1;
}





.edge-label {
    -fx-font: normal 9pt "sans-serif";
    -fx-fill: black; /* Text color */
    -fx-background-color: red; /* Background color */
    -fx-padding: 2px; /* Padding around the text */
    -fx-background-radius: 3px; /* Rounded corners for the background */
    -fx-border-color: black; /* Optional: Add a border around the background */
    -fx-border-width: 1px; /* Border thickness */
    -fx-border-radius: 3px; /* Ensure the border follows the background's rounded corners */
}



.edge-label-hover {
    -fx-font:bold 9pt "sans-serif";

}

/* Since version 2.0.0-rc2 this style is cumulatively applied to arrows, after the "edge" class.
 * Use to, e.g., to remove the dash effect (that will not look good in arrows).
 * Afterwards, styles applied to the edges are propagated to the respective arrows. You can, however, apply
 * specific styles to the arrows programmatically. See example programs.
 */
.arrow {
    -fx-opacity: 1;
    -fx-fill: gray;
     -fx-stroke-width: 1;
     -fx-stroke-dash-array: 0.1;
     -fx-stroke: gray;
}
.arrow-hover {
   -fx-opacity: 1;
    -fx-fill: gray;
     -fx-stroke-width: 2;
     -fx-stroke-dash-array: 0.1;
}

/* Custom vertex class. If you use node.setStyleClass("myVertex"), any previous styling
 * will be overwritten. If you use node.addStyleClass("myVertex"), the styles are applied
 * cumulatively; in the later case, any properties not wanted from the default "vertex" class
 * must be overwritten.
 */
.myVertex {
    -fx-stroke-width: 4;
    -fx-stroke: green;
    -fx-stroke-type: inside; /* you should keep this if using arrows */
    -fx-fill: yellowgreen;
}

/* Custom edge class. The same above logic applies to edges.
 */
.myEdge {
    -fx-stroke-width: 2;
    -fx-stroke: red;
    -fx-opacity: 1;
    -fx-fill: transparent; /* important to keep for curved edges */
}

